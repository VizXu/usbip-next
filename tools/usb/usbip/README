#
# README for usbip-utils
#
# Copyright (C) 2011 matt mooney <mfm@muteddisk.com>
#               2005-2008 Takahiro Hirofuchi
# Copyright (C) 2015-2016 Nobuo Iwata <nobuo.iwata@fujixerox.co.jp>


[Requirements]
    - USB/IP device drivers
	Found in the staging directory of the Linux kernel.

    - libudev >= 2.0
	libudev library

    - libwrap0-dev
	tcp wrapper library

    - gcc >= 4.0

    - libtool, automake >= 1.9, autoconf >= 2.5.0, pkg-config

[Optional]
    - hwdata
        Contains USB device identification data.


[Install]
    0. Generate configuration scripts.
	$ ./autogen.sh

    1. Compile & install the userspace utilities.
	$ ./configure [--with-tcp-wrappers=no] [--with-usbids-dir=<dir>]
	$ make install

    2. Compile & install USB/IP drivers.


[Usage]
Device-side: a machine has USB device(s).
Application-side: a machine runs an application software uses remote USB device.

1) Connect from application-side to device-side.

    dev:# (Physically attach your USB device.)

    dev:# insmod usbip-core.ko
    dev:# insmod usbip-host.ko

    dev:# usbipd -D
	- Start usbip daemon.

    dev:# usbip list -l
	- List driver assignments for USB devices and their busid.

    dev:# usbip bind --busid <busid>
	- Bind usbip-host.ko to the device with <busid>.
	- The USB device with <busid> is now exportable to other hosts!
	- Use `usbip unbind --busid <busid>` to stop exporting the device.

    app:# insmod usbip-core.ko
    app:# insmod vhci-hcd.ko

    app:# usbip list --remote <host>
	- List exported USB devices on the <host>.

    app:# usbip attach --remote <host> --busid <busid>
	- Connect the remote USB device.

    app:# usbip port
	- Show virtual port status.

    app:# usbip detach --port <port>
	- Detach the USB device.

2) Connect from device-side to application-side.

    app:# insmod usbip-core.ko
    app:# insmod vhci-hcd.ko

    app:# usbipa -D
	- Start usbip daemon.

    dev:# (Physically attach your USB device.)

    dev:# insmod usbip-core.ko
    dev:# insmod usbip-host.ko

    dev:# usbip list -l
	- List driver assignments for USB devices and their busid.

    dev:# usbip connect --remote <host> --busid <busid>
	- Bind usbip-host.ko to the device with <busid>.
	- The USB device of <busid> is connected to remote host!

    dev:# usbip disconnect --remote <host> --busid <busid>
	- The USB device with <busid> is disconnected from remote host.
	- Unbind usbip-host.ko from the device.


[Activate USB/IP API]

To activate USB/IP API, usbip-ux.ko - the userspace transmission module should
be loaded. When usbip-ux.ko is loaded, usbip attach and connect transmit URBs in
userspace and will continue executing until usbip detach or disconnect is
exeuted.

    app:# insmod usbip-core.ko
    app:# insmod usbip-ux.ko
    app:# insmod vhci-hcd.ko

    app:# usbipa -D

    dev:# insmod usbip-core.ko
    dev:# insmod usbip-ux.ko
    dev:# insmod usbip-host.ko

    dev:# usbip connect --remote <host> --busid <busid>
        - Continue running.
        - Until disconnect command is executed in other terminal window.

    dev:# usbip disconnect --remote <host> --busid <busid>
        - Stops transission, quits connect command and disconnect device.


[Example]
---------------------------
	DEVICE SIDE
---------------------------
Physically attach your USB devices to this host.

    trois:# insmod path/to/usbip-core.ko
    trois:# insmod path/to/usbip-host.ko
    trois:# usbipd -D

In another terminal, let's look up what USB devices are physically
attached to this host.

    trois:# usbip list -l
    Local USB devices
    =================
     - busid 1-1 (05a9:a511)
	     1-1:1.0 -> ov511

     - busid 3-2 (0711:0902)
	     3-2:1.0 -> none

     - busid 3-3.1 (08bb:2702)
	     3-3.1:1.0 -> snd-usb-audio
	     3-3.1:1.1 -> snd-usb-audio

     - busid 3-3.2 (04bb:0206)
	     3-3.2:1.0 -> usb-storage

     - busid 3-3 (0409:0058)
	     3-3:1.0 -> hub

     - busid 4-1 (046d:08b2)
	     4-1:1.0 -> none
	     4-1:1.1 -> none
	     4-1:1.2 -> none

     - busid 5-2 (058f:9254)
	     5-2:1.0 -> hub

A USB storage device of busid 3-3.2 is now bound to the usb-storage
driver. To export this device, we first mark the device as
"exportable"; the device is bound to the usbip-host driver. Please
remember you can not export a USB hub.

Mark the device of busid 3-3.2 as exportable:

    trois:# usbip --debug bind --busid 3-3.2
    ...
    usbip debug: usbip_bind.c:162:[unbind_other] 3-3.2:1.0 -> usb-storage
    ...
    bind device on busid 3-3.2: complete

    trois:# usbip list -l
    Local USB devices
    =================
    ...

     - busid 3-3.2 (04bb:0206)
	     3-3.2:1.0 -> usbip-host
    ...

---------------------------
     APPLICATION SIDE
---------------------------
First, let's list available remote devices that are marked as
exportable on the host.

    deux:# insmod path/to/usbip-core.ko
    deux:# insmod path/to/vhci-hcd.ko

    deux:# usbip list --remote 10.0.0.3
    Exportable USB devices
    ======================
     - 10.0.0.3
	    1-1: Prolific Technology, Inc. : unknown product (067b:3507)
	       : /sys/devices/pci0000:00/0000:00:1f.2/usb1/1-1
	       : (Defined at Interface level) / unknown subclass / unknown protocol (00/00/00)
	       :  0 - Mass Storage / SCSI / Bulk (Zip) (08/06/50)

	1-2.2.1: Apple Computer, Inc. : unknown product (05ac:0203)
	       : /sys/devices/pci0000:00/0000:00:1f.2/usb1/1-2/1-2.2/1-2.2.1
	       : (Defined at Interface level) / unknown subclass / unknown protocol (00/00/00)
	       :  0 - Human Interface Devices / Boot Interface Subclass / Keyboard (03/01/01)

	1-2.2.3: OmniVision Technologies, Inc. : OV511+ WebCam (05a9:a511)
	       : /sys/devices/pci0000:00/0000:00:1f.2/usb1/1-2/1-2.2/1-2.2.3
	       : (Defined at Interface level) / unknown subclass / unknown protocol (00/00/00)
	       :  0 - Vendor Specific Class / unknown subclass / unknown protocol (ff/00/00)

	    3-1: Logitech, Inc. : QuickCam Pro 4000 (046d:08b2)
	       : /sys/devices/pci0000:00/0000:00:1e.0/0000:02:0a.0/usb3/3-1
	       : (Defined at Interface level) / unknown subclass / unknown protocol (00/00/00)
	       :  0 - Data / unknown subclass / unknown protocol (0a/ff/00)
	       :  1 - Audio / Control Device / unknown protocol (01/01/00)
	       :  2 - Audio / Streaming / unknown protocol (01/02/00)

Attach a remote USB device:

    deux:# usbip attach --remote 10.0.0.3 --busid 1-1
    port 0 attached

Show the devices attached to this machine:

    deux:# usbip port
    Port 00: <Port in Use> at Full Speed(12Mbps)
	   Prolific Technology, Inc. : unknown product (067b:3507)
	   6-1 -> usbip://10.0.0.3:3240/1-1  (remote bus/dev 001/004)
	   6-1:1.0 used by usb-storage
			  /sys/class/scsi_device/0:0:0:0/device
			  /sys/class/scsi_host/host0/device
			  /sys/block/sda/device

Detach the imported device:

    deux:# usbip detach --port 0
    port 0 detached


[Security consideration]

Daemons accept following requests form network :
    EXISTING) 'list --remote' and 'attach'
    NEW) 'connect' and 'disconnect'

TCP wrappers allows and/or denies network access. It is enabled when the daemons are compiled with ./configure --with-tcp-wrappers.

When the daemons are running with SSL or Secure WebSocket tunneling proxy, the proxy can use client authentication with certificate files.

Udev rules can allow only known devices. To identify whether a device is remote, the local bus-id (KERNEL parameter in the rule) will be found in the last column of /sys/devices/platform/vhci_hcd/status[.N]. When device is found, the port number of USB/IP can be found in the first column of the matched line. The udev script can finish the connection using detach operation with the port number.


[Checklist]
    - See 'Debug Tips' on the project wiki.
	- http://usbip.wiki.sourceforge.net/how-to-debug-usbip
    - usbip-host.ko must be bound to the target device.
	- See /proc/bus/usb/devices and find "Driver=..." lines of the device.
    - Shutdown firewall.
	- usbip now uses TCP port 3240.
    - Disable SELinux.
    - Check the kernel and daemon messages.


[Contact]
    Mailing List: linux-usb@vger.kernel.org
